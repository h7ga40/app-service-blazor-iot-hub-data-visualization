@page "/fetchdata"

@using System.Net.WebSockets
@using System.Text
@using System.IO
@using System.Threading
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util
@using IoTHubReader.Shared

@implements IDisposable
@inject HttpClient Http

<h1>Telemetering</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts.Count == 0) {
	<p><em>Loading...</em></p>
}
else {
	<h2>Chart</h2>
	<ChartJsLineChart @ref="_lineChartJs" Config="@_lineConfig" Width="600" Height="300" />
	<h2>Table</h2>
	<table class="table">
		<thead>
			<tr>
				<th>Time</th>
				<th>Temp. (C)</th>
				<th>Temp. (F)</th>
				<th>Humidity(F)</th>
				<th>Summary</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var forecast in forecasts) {
				<tr>
					<td>@forecast.Date.ToString()</td>
					<td>@forecast.TemperatureC</td>
					<td>@forecast.TemperatureF</td>
					<td>@forecast.Humidity</td>
					<td>@forecast.Summary</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	LineConfig _lineConfig;
	ChartJsLineChart _lineChartJs;
	private List<Telemetry> forecasts = new List<Telemetry>();
	LineDataset<TimeTuple<int>> _tempDataSet;
	LineDataset<TimeTuple<int>> _humiDataSet;
	CancellationTokenSource disposalTokenSource = new CancellationTokenSource();
	ClientWebSocket webSocket = new ClientWebSocket();

	protected override async Task OnInitializedAsync()
	{
		_lineConfig = new LineConfig {
			Options = new LineOptions {
				Responsive = true,
				Title = new OptionsTitle {
					Display = true,
					Text = "Line Chart"
				},
				Legend = new Legend {
					Position = Position.Right,
					Labels = new LegendLabelConfiguration {
						UsePointStyle = true
					}
				},
				Tooltips = new Tooltips {
					Mode = InteractionMode.Nearest,
					Intersect = false
				},
				Scales = new Scales {
					xAxes = new List<CartesianAxis> {
						new TimeAxis
						{
							Distribution = TimeDistribution.Linear,
							Ticks = new TimeTicks
							{
								Source = TickSource.Data
							},
							Time = new TimeOptions
							{
								Unit = TimeMeasurement.Second,
								Round = TimeMeasurement.Second,
								TooltipFormat = "DD.MM.YYYY HH:mm",
								DisplayFormats = TimeDisplayFormats.DE_CH
							},
							ScaleLabel = new ScaleLabel
							{
								LabelString = "Time"
							}
						}
					},
					yAxes = new List<CartesianAxis> {
						new LinearCartesianAxis {
							ID = "Temperature",
							ScaleLabel = new ScaleLabel{
								LabelString = "Temperature [℃]"
							},
							Position = Position.Left,
							Ticks = new LinearCartesianTicks {
								SuggestedMin = -20,
								SuggestedMax = 55
							}
						},
						new LinearCartesianAxis {
							ID = "Humidity",
							ScaleLabel = new ScaleLabel{
								LabelString = "Humidity [％]"
							},
							Position = Position.Right,
							Ticks = new LinearCartesianTicks {
								SuggestedMin = 0,
								SuggestedMax = 100
							}
						}
					}
				},
				Hover = new LineOptionsHover {
					Intersect = true,
					Mode = InteractionMode.Y
				}
			}
		};

		forecasts.AddRange(await Http.GetFromJsonAsync<Telemetry[]>("Telemetry"));

		_tempDataSet = new LineDataset<TimeTuple<int>> {
			BackgroundColor = ColorUtil.RandomColorString(),
			BorderColor = ColorUtil.RandomColorString(),
			Label = "Temperature in ℃",
			Fill = false,
			BorderWidth = 2,
			PointRadius = 3,
			PointBorderWidth = 1,
			SteppedLine = SteppedLine.False,
			YAxisID = "Temperature",
		};

		_tempDataSet.AddRange(forecasts.Select(p => new TimeTuple<int>(new Moment(p.Date), p.TemperatureC)));
		_lineConfig.Data.Datasets.Add(_tempDataSet);

		_humiDataSet = new LineDataset<TimeTuple<int>> {
			BackgroundColor = ColorUtil.RandomColorString(),
			BorderColor = ColorUtil.RandomColorString(),
			Label = "Humidity",
			Fill = false,
			BorderWidth = 2,
			PointRadius = 3,
			PointBorderWidth = 1,
			SteppedLine = SteppedLine.False,
			YAxisID = "Humidity",
		};

		_humiDataSet.AddRange(forecasts.Select(p => new TimeTuple<int>(new Moment(p.Date), p.Humidity)));
		_lineConfig.Data.Datasets.Add(_humiDataSet);

		var url = new UriBuilder(Http.BaseAddress);
		url.Scheme = "wss";
		url.Path += "ws";
		await webSocket.ConnectAsync(url.Uri, disposalTokenSource.Token);
		_ = ReceiveLoop();
	}

	async Task SendMessageAsync(string message)
	{
		var dataToSend = new ArraySegment<byte>(Encoding.UTF8.GetBytes(message));
		await webSocket.SendAsync(dataToSend, WebSocketMessageType.Text, true, disposalTokenSource.Token);
	}

	async Task ReceiveLoop()
	{
		var buffer = new ArraySegment<byte>(new byte[4 * 1024]);
		while (!disposalTokenSource.IsCancellationRequested) {
			var received = await webSocket.ReceiveAsync(buffer, disposalTokenSource.Token);
			Console.WriteLine($"webSocket.ReceiveAsync {received.Count}");
			try {
				var stream = new MemoryStream(buffer.Array, 0, received.Count);
				var message = await System.Text.Json.JsonSerializer.DeserializeAsync<WSMessage>(stream);
				var forecast = System.Text.Json.JsonSerializer.Deserialize<Telemetry>(Convert.FromBase64String(message.IotData));
				forecasts.Add(forecast);
				Console.WriteLine($"JsonSerializer.DeserializeAsync {forecasts.Count}");
				_tempDataSet.Add(new TimeTuple<int>(new Moment(forecast.Date), forecast.TemperatureC));
				_humiDataSet.Add(new TimeTuple<int>(new Moment(forecast.Date), forecast.Humidity));
				StateHasChanged();
			}
			catch (Exception e) {
				Console.WriteLine($"JsonSerializer.DeserializeAsync {e.Message}");
			}
		}
	}

	public void Dispose()
	{
		disposalTokenSource.Cancel();
		_ = webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Bye", CancellationToken.None);
	}
}
