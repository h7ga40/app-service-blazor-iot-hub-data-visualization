@page "/device_twin"
@using System.IO
@using System.Net
@using System.Text.Json
@using BlazorFileSaver
@using Blazor.FileReader
@using IoTHubReader.Client.Components

@inject IHttpClientFactory httpClientFactory
@inject IFileReaderService fileReaderService

<h1>IoT Central</h1>

<div>
	<BSForm Model="@formsModelVal" ValidateOnInit="false">
		<DataAnnotationsValidator />
		<BSFormGroup style="position: relative;">
			<BSLabel For="subdomain">アプリケーション名</BSLabel>
			<BSInput Id="subdomain" InputType="InputType.Text" PlaceHolder="[APP_NAME].azureiotcentral.com" @bind-Value="formsModelVal.Subdomain" />
			<BSFormFeedback For="@(() => formsModelVal.Subdomain)" IsTooltip="true" InvalidMessage="[APP_NAME].azureiotcentral.com" />
		</BSFormGroup>
		<BSFormGroup style="position: relative;">
			<BSLabel For="accessToken">アクセストークン</BSLabel>
			<BSInput Id="accessToken" InputType="InputType.Text" PlaceHolder="SharedAccessSignature sr=xxxx..." @bind-Value="formsModelVal.AccessToken" />
			<BSFormFeedback For="@(() => formsModelVal.AccessToken)" IsTooltip="true" InvalidMessage="SharedAccessSignature sr=xxxx..." />
		</BSFormGroup>
		<BSButton Color="Color.Primary" @onclick="OnQuery">Query</BSButton>
	</BSForm>
</div>

<h1>Device twin</h1>

<BSBasicForm>
	<BSFormGroup>
		<BSLabel For="deviceTwin">Device template json file</BSLabel>
		<input @ref=inputTypeFileElement type="file" id="deviceTwin" Value="string.Empty" @onchange="ReadJson" />
	</BSFormGroup>
</BSBasicForm>

<BSTabGroup ShownEvent="OnShown">
	<BSTabList>
		@{
			int i = 0;
			foreach (var tab in tabs) {
				if (i >= (fileCount + queryCount))
					break;
				i++;
				<BSTab @ref="tab.Tab">
					<BSTabLabel>@(DTLocalizableConverter.GetDisplayName(tab.DeviceTemplate.DisplayName, "ja"))</BSTabLabel>
					<BSTabContent>
					</BSTabContent>
				</BSTab>
			}
		}
	</BSTabList>
	<BSTabSelectedContent />
</BSTabGroup>

<div class="editor-box" style="position: relative; min-height: 400px;">
	<AceEditor @ref="textEditor" OnCreate="OnCreate" OnChange="OnChange">
	</AceEditor>
</div>

<input type="text" @bind="FileName" />
<BSButton Color="Color.Primary" @onclick="SaveRuby">Save ruby</BSButton>

@code {
	private string ruby = "";
	private AceEditor textEditor;
	private FormsModel formsModelVal = new FormsModel();
	private string centralDnsSuffixInPath = "azureiotcentral.com";
	ElementReference inputTypeFileElement;

	class TabInfo
	{
		public DTInterface DeviceTemplate;
		public BSTab Tab;
	}

	List<TabInfo> tabs = new List<TabInfo>();
	int fileCount = 0, queryCount = 0;

	[Inject]
	private IBlazorFileSaver BlazorFileSaver { get; set; }
	private string FileName { get; set; } = "DeviceClient.rb";

	class FormsModel
	{
		public string Subdomain { get; set; }
		public string AccessToken { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
	}

	private async Task OnQuery()
	{
		var accessToken = formsModelVal.AccessToken;
		var subdomain = formsModelVal.Subdomain;

		if (String.IsNullOrEmpty(accessToken) || String.IsNullOrEmpty(accessToken)) {
			return;
		}

		if (accessToken.StartsWith("SharedAccessSignature "))
			Program.SharedAccessSignature = accessToken.Substring(22);
		else
			Program.SharedAccessSignature = accessToken;

		var httpClient = httpClientFactory.CreateClient("IoTCentral");
		var client = new DeviceTemplatesClient(httpClient);
		client.BaseUrl = $"https://{subdomain}.{centralDnsSuffixInPath}/api/preview";
		var result = await client.ListAsync();
		if (result == null) {
			return;
		}

		int i = 0;
		foreach (var dt in result.Value) {
			TabInfo tab = (i < tabs.Count) ? tabs[i] : new TabInfo();
			tab.DeviceTemplate = dt.CapabilityModel;
			tabs.Add(tab);
			i++;
		}
		queryCount = i;
	}

	public async Task ReadJson()
	{
		int i = queryCount;
		foreach (var file in await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync()) {
			List<DTInterface> deviceTemplates;
			using (var stream = await file.OpenReadAsync()) {
				deviceTemplates = await JsonSerializer.DeserializeAsync<List<DTInterface>>(stream);
			}
			if (deviceTemplates != null) {
				foreach (var capabilityModel in deviceTemplates) {
				TabInfo tab = (i < tabs.Count) ? tabs[i] : new TabInfo();
					tab.DeviceTemplate = capabilityModel;
				tabs.Add(tab);
				i++;
			}
		}
		}
		fileCount = i - queryCount;
	}

	private void Select(DTInterface deviceTemplate)
	{
		var moduleName = DTLocalizableConverter.ToPascalCase(DTLocalizableConverter.GetCodeName(deviceTemplate.DisplayName));
		FileName = moduleName + ".rb";
		try {
			ruby = GenerateRuby(deviceTemplate, moduleName);
		}
		catch(Exception e) {
			ruby = "#" + e.Message;
			Console.WriteLine(e.ToString());
		}
		textEditor.setValue(ruby);
	}

	private async Task SaveRuby()
	{
		await BlazorFileSaver.SaveAs(FileName, ruby);
	}

	private Task OnCreate()
	{
		textEditor.setTheme("ace/theme/twilight");
		textEditor.setShowInvisibles(true);
		textEditor.gotoLine(0, 0);
		var session = textEditor.getSession();
		session.setMode("ace/mode/ruby");
		session.setTabSize(2);
		session.setUseSoftTabs(false);

		textEditor.setValue("ruby code");
		return Task.CompletedTask;
	}

	private Task OnChange()
	{
		return Task.CompletedTask;
	}

	private void OnShown(BSTabEvent ev)
	{
		var tab = tabs.FirstOrDefault((t) => t.Tab == ev.Activated);
		Select(tab.DeviceTemplate);
	}
}
