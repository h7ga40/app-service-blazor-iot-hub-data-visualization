@using System.Text.Json
@using IoTHubReader.Client.Pages

@if (property != null) {
	<h3>
		@property.Ja
	</h3>
	<div>@($"Get:{property.Get}, Set:{property.Set}, Inf:{property.Inf}")</div>
	<pre>@GetDataInfo()</pre>
}

@code{
	[Parameter]
	public ELDevice Device { get; set; }

	ELProperty property;
	[Parameter]
	public ELProperty Property { get { return property; } set { SetProperty(value); } }

	List<DTInterfaceContent> dtifs = new List<DTInterfaceContent>();

	protected void SetProperty(ELProperty property)
	{
		this.property = property;
		if (property == null) {
			return;
		}

		dtifs.Clear();
		string deviceName = DTLocalizableConverter.MakeDigitalTwinId(Device.En);

		EchonetLite.MakeDTInterface(dtifs, 0, deviceName, EchonetLite.GetAccessValue(property),
		property.Ja, property.En, property.Data);

		if (property.OneOf != null) {
			foreach (var one in property.OneOf) {
				EchonetLite.MakeDTInterface(dtifs, 0, deviceName, EchonetLite.GetAccessValue(one),
				one.Ja, one.En, one.Data);
			}
		}
	}

	public string GetDataInfo()
	{
		var option = new JsonSerializerOptions {
			WriteIndented = true,
			IgnoreNullValues = true,
			Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
		};
#if false
var data = Property.Data;
if (data.Reference != null) {
return JsonSerializer.Serialize(data.Reference, option); ;
}

return JsonSerializer.Serialize(data, option);
#else
		return JsonSerializer.Serialize(dtifs.ToArray(), option);
#endif
	}
}
